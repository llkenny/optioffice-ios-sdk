//
// Problem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OptiOfficeSDKAPI.Problem")
public typealias Problem = OptiOfficeSDKAPI.Problem

extension OptiOfficeSDKAPI {

public struct Problem: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case validation = "https://api.optioffice.local/errors/validation"
        case unauthorized = "https://api.optioffice.local/errors/unauthorized"
        case forbidden = "https://api.optioffice.local/errors/forbidden"
        case notFound = "https://api.optioffice.local/errors/not-found"
        case conflict = "https://api.optioffice.local/errors/conflict"
    }
    public var type: ModelType
    public var title: String
    public var status: Int
    public var detail: String?
    public var instance: String?

    public init(type: ModelType, title: String, status: Int, detail: String? = nil, instance: String? = nil) {
        self.type = type
        self.title = title
        self.status = status
        self.detail = detail
        self.instance = instance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case title
        case status
        case detail
        case instance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(title, forKey: .title)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(detail, forKey: .detail)
        try container.encodeIfPresent(instance, forKey: .instance)
    }
}

}
