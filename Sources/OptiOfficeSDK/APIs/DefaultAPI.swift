//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension OptiOfficeSDKAPI {


open class DefaultAPI {

    /**
     Delete document
     
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdDocumentsDocumentIdDelete(orgId: String, documentId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdDocumentsDocumentIdDeleteWithRequestBuilder(orgId: orgId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete document
     - DELETE /orgs/{orgId}/documents/{documentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdDocumentsDocumentIdDeleteWithRequestBuilder(orgId: String, documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/documents/{documentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get document
     
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdDocumentsDocumentIdGet(orgId: String, documentId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Document?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdDocumentsDocumentIdGetWithRequestBuilder(orgId: orgId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get document
     - GET /orgs/{orgId}/documents/{documentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - returns: RequestBuilder<Document> 
     */
    open class func orgsOrgIdDocumentsDocumentIdGetWithRequestBuilder(orgId: String, documentId: String) -> RequestBuilder<Document> {
        var localVariablePath = "/orgs/{orgId}/documents/{documentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Document>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update document
     
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - parameter document: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdDocumentsDocumentIdPut(orgId: String, documentId: String, document: Document, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdDocumentsDocumentIdPutWithRequestBuilder(orgId: orgId, documentId: documentId, document: document).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update document
     - PUT /orgs/{orgId}/documents/{documentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter documentId: (path)  
     - parameter document: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdDocumentsDocumentIdPutWithRequestBuilder(orgId: String, documentId: String, document: Document) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/documents/{documentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: document)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List documents
     
     - parameter orgId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdDocumentsGet(orgId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Document]?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdDocumentsGetWithRequestBuilder(orgId: orgId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List documents
     - GET /orgs/{orgId}/documents
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - returns: RequestBuilder<[Document]> 
     */
    open class func orgsOrgIdDocumentsGetWithRequestBuilder(orgId: String) -> RequestBuilder<[Document]> {
        var localVariablePath = "/orgs/{orgId}/documents"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Document]>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload document
     
     - parameter orgId: (path)  
     - parameter document: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdDocumentsPost(orgId: String, document: Document, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdDocumentsPostWithRequestBuilder(orgId: orgId, document: document).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload document
     - POST /orgs/{orgId}/documents
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter document: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdDocumentsPostWithRequestBuilder(orgId: String, document: Document) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/documents"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: document)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List leads
     
     - parameter orgId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdLeadsGet(orgId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Lead]?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdLeadsGetWithRequestBuilder(orgId: orgId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List leads
     - GET /orgs/{orgId}/leads
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - returns: RequestBuilder<[Lead]> 
     */
    open class func orgsOrgIdLeadsGetWithRequestBuilder(orgId: String) -> RequestBuilder<[Lead]> {
        var localVariablePath = "/orgs/{orgId}/leads"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Lead]>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete lead
     
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdLeadsLeadIdDelete(orgId: String, leadId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdLeadsLeadIdDeleteWithRequestBuilder(orgId: orgId, leadId: leadId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete lead
     - DELETE /orgs/{orgId}/leads/{leadId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdLeadsLeadIdDeleteWithRequestBuilder(orgId: String, leadId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/leads/{leadId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let leadIdPreEscape = "\(APIHelper.mapValueToPathItem(leadId))"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get lead
     
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdLeadsLeadIdGet(orgId: String, leadId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Lead?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdLeadsLeadIdGetWithRequestBuilder(orgId: orgId, leadId: leadId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get lead
     - GET /orgs/{orgId}/leads/{leadId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - returns: RequestBuilder<Lead> 
     */
    open class func orgsOrgIdLeadsLeadIdGetWithRequestBuilder(orgId: String, leadId: String) -> RequestBuilder<Lead> {
        var localVariablePath = "/orgs/{orgId}/leads/{leadId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let leadIdPreEscape = "\(APIHelper.mapValueToPathItem(leadId))"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Lead>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update lead
     
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - parameter lead: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdLeadsLeadIdPut(orgId: String, leadId: String, lead: Lead, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdLeadsLeadIdPutWithRequestBuilder(orgId: orgId, leadId: leadId, lead: lead).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update lead
     - PUT /orgs/{orgId}/leads/{leadId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter leadId: (path)  
     - parameter lead: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdLeadsLeadIdPutWithRequestBuilder(orgId: String, leadId: String, lead: Lead) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/leads/{leadId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let leadIdPreEscape = "\(APIHelper.mapValueToPathItem(leadId))"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lead)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create lead
     
     - parameter orgId: (path)  
     - parameter lead: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdLeadsPost(orgId: String, lead: Lead, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdLeadsPostWithRequestBuilder(orgId: orgId, lead: lead).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create lead
     - POST /orgs/{orgId}/leads
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter lead: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdLeadsPostWithRequestBuilder(orgId: String, lead: Lead) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/leads"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lead)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List listings
     
     - parameter orgId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdListingsGet(orgId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Listing]?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdListingsGetWithRequestBuilder(orgId: orgId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List listings
     - GET /orgs/{orgId}/listings
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - returns: RequestBuilder<[Listing]> 
     */
    open class func orgsOrgIdListingsGetWithRequestBuilder(orgId: String) -> RequestBuilder<[Listing]> {
        var localVariablePath = "/orgs/{orgId}/listings"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Listing]>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete listing
     
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdListingsListingIdDelete(orgId: String, listingId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdListingsListingIdDeleteWithRequestBuilder(orgId: orgId, listingId: listingId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete listing
     - DELETE /orgs/{orgId}/listings/{listingId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdListingsListingIdDeleteWithRequestBuilder(orgId: String, listingId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/listings/{listingId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let listingIdPreEscape = "\(APIHelper.mapValueToPathItem(listingId))"
        let listingIdPostEscape = listingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listingId}", with: listingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get listing
     
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdListingsListingIdGet(orgId: String, listingId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Listing?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdListingsListingIdGetWithRequestBuilder(orgId: orgId, listingId: listingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get listing
     - GET /orgs/{orgId}/listings/{listingId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - returns: RequestBuilder<Listing> 
     */
    open class func orgsOrgIdListingsListingIdGetWithRequestBuilder(orgId: String, listingId: String) -> RequestBuilder<Listing> {
        var localVariablePath = "/orgs/{orgId}/listings/{listingId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let listingIdPreEscape = "\(APIHelper.mapValueToPathItem(listingId))"
        let listingIdPostEscape = listingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listingId}", with: listingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Listing>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update listing
     
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - parameter listing: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdListingsListingIdPut(orgId: String, listingId: String, listing: Listing, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdListingsListingIdPutWithRequestBuilder(orgId: orgId, listingId: listingId, listing: listing).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update listing
     - PUT /orgs/{orgId}/listings/{listingId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter listingId: (path)  
     - parameter listing: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdListingsListingIdPutWithRequestBuilder(orgId: String, listingId: String, listing: Listing) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/listings/{listingId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let listingIdPreEscape = "\(APIHelper.mapValueToPathItem(listingId))"
        let listingIdPostEscape = listingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listingId}", with: listingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listing)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create listing
     
     - parameter orgId: (path)  
     - parameter listing: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdListingsPost(orgId: String, listing: Listing, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdListingsPostWithRequestBuilder(orgId: orgId, listing: listing).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create listing
     - POST /orgs/{orgId}/listings
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter listing: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdListingsPostWithRequestBuilder(orgId: String, listing: Listing) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/listings"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listing)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List offices
     
     - parameter orgId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdOfficesGet(orgId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Office]?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdOfficesGetWithRequestBuilder(orgId: orgId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List offices
     - GET /orgs/{orgId}/offices
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - returns: RequestBuilder<[Office]> 
     */
    open class func orgsOrgIdOfficesGetWithRequestBuilder(orgId: String) -> RequestBuilder<[Office]> {
        var localVariablePath = "/orgs/{orgId}/offices"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Office]>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete office
     
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdOfficesOfficeIdDelete(orgId: String, officeId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdOfficesOfficeIdDeleteWithRequestBuilder(orgId: orgId, officeId: officeId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete office
     - DELETE /orgs/{orgId}/offices/{officeId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdOfficesOfficeIdDeleteWithRequestBuilder(orgId: String, officeId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/offices/{officeId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let officeIdPreEscape = "\(APIHelper.mapValueToPathItem(officeId))"
        let officeIdPostEscape = officeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{officeId}", with: officeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get office
     
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdOfficesOfficeIdGet(orgId: String, officeId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Office?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdOfficesOfficeIdGetWithRequestBuilder(orgId: orgId, officeId: officeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get office
     - GET /orgs/{orgId}/offices/{officeId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - returns: RequestBuilder<Office> 
     */
    open class func orgsOrgIdOfficesOfficeIdGetWithRequestBuilder(orgId: String, officeId: String) -> RequestBuilder<Office> {
        var localVariablePath = "/orgs/{orgId}/offices/{officeId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let officeIdPreEscape = "\(APIHelper.mapValueToPathItem(officeId))"
        let officeIdPostEscape = officeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{officeId}", with: officeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Office>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update office
     
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - parameter office: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdOfficesOfficeIdPut(orgId: String, officeId: String, office: Office, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdOfficesOfficeIdPutWithRequestBuilder(orgId: orgId, officeId: officeId, office: office).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update office
     - PUT /orgs/{orgId}/offices/{officeId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter officeId: (path)  
     - parameter office: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdOfficesOfficeIdPutWithRequestBuilder(orgId: String, officeId: String, office: Office) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/offices/{officeId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let officeIdPreEscape = "\(APIHelper.mapValueToPathItem(officeId))"
        let officeIdPostEscape = officeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{officeId}", with: officeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: office)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create office
     
     - parameter orgId: (path)  
     - parameter office: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdOfficesPost(orgId: String, office: Office, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdOfficesPostWithRequestBuilder(orgId: orgId, office: office).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create office
     - POST /orgs/{orgId}/offices
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter office: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdOfficesPostWithRequestBuilder(orgId: String, office: Office) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/offices"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: office)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List payments
     
     - parameter orgId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdPaymentsGet(orgId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: [Payment]?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdPaymentsGetWithRequestBuilder(orgId: orgId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List payments
     - GET /orgs/{orgId}/payments
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - returns: RequestBuilder<[Payment]> 
     */
    open class func orgsOrgIdPaymentsGetWithRequestBuilder(orgId: String) -> RequestBuilder<[Payment]> {
        var localVariablePath = "/orgs/{orgId}/payments"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Payment]>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete payment
     
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdPaymentsPaymentIdDelete(orgId: String, paymentId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdPaymentsPaymentIdDeleteWithRequestBuilder(orgId: orgId, paymentId: paymentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete payment
     - DELETE /orgs/{orgId}/payments/{paymentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdPaymentsPaymentIdDeleteWithRequestBuilder(orgId: String, paymentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/payments/{paymentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let paymentIdPreEscape = "\(APIHelper.mapValueToPathItem(paymentId))"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{paymentId}", with: paymentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get payment
     
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdPaymentsPaymentIdGet(orgId: String, paymentId: String, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Payment?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdPaymentsPaymentIdGetWithRequestBuilder(orgId: orgId, paymentId: paymentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get payment
     - GET /orgs/{orgId}/payments/{paymentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - returns: RequestBuilder<Payment> 
     */
    open class func orgsOrgIdPaymentsPaymentIdGetWithRequestBuilder(orgId: String, paymentId: String) -> RequestBuilder<Payment> {
        var localVariablePath = "/orgs/{orgId}/payments/{paymentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let paymentIdPreEscape = "\(APIHelper.mapValueToPathItem(paymentId))"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{paymentId}", with: paymentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Payment>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update payment
     
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - parameter payment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdPaymentsPaymentIdPut(orgId: String, paymentId: String, payment: Payment, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdPaymentsPaymentIdPutWithRequestBuilder(orgId: orgId, paymentId: paymentId, payment: payment).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update payment
     - PUT /orgs/{orgId}/payments/{paymentId}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter paymentId: (path)  
     - parameter payment: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdPaymentsPaymentIdPutWithRequestBuilder(orgId: String, paymentId: String, payment: Payment) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/payments/{paymentId}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let paymentIdPreEscape = "\(APIHelper.mapValueToPathItem(paymentId))"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{paymentId}", with: paymentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create payment
     
     - parameter orgId: (path)  
     - parameter payment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orgsOrgIdPaymentsPost(orgId: String, payment: Payment, apiResponseQueue: DispatchQueue = OptiOfficeSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return orgsOrgIdPaymentsPostWithRequestBuilder(orgId: orgId, payment: payment).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create payment
     - POST /orgs/{orgId}/payments
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orgId: (path)  
     - parameter payment: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgIdPaymentsPostWithRequestBuilder(orgId: String, payment: Payment) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/payments"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OptiOfficeSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OptiOfficeSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
}
